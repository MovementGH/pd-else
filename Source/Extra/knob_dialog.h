// Based on dialogs from iemguis in Pd Vanilla (Tim Schoen & Porres)

sys_gui("\n"
"\n"
"namespace eval ::dialog_knob:: {\n"
"}\n"
// arrays to store per-dialog values
"\n"
"array set ::dialog_knob::var_size {} ;\n"
"\n"
"array set ::dialog_knob::var_range_max {} ;\n"
"array set ::dialog_knob::var_range_min {} ;\n"
"\n"
"array set ::dialog_knob::var_initial {} ;\n"
"array set ::dialog_knob::var_circular {} ;\n"
"\n"
"array set ::dialog_knob::var_steps {} ;\n"
"array set ::dialog_knob::var_arc_shown {} ;\n"
"array set ::dialog_knob::var_outline_shown {} ;\n"
"array set ::dialog_knob::var_savestate {} ;\n"
"array set ::dialog_knob::var_loadbang {} ;\n"
"array set ::dialog_knob::var_showticks {} ;\n"
"array set ::dialog_knob::var_angle_width {} ;\n"
"array set ::dialog_knob::var_angle_offset {} ;\n"
"array set ::dialog_knob::var_discrete {} ;\n"

"array set ::dialog_knob::var_exp {} ;\n"
"array set ::dialog_knob::var_expmode {} ;\n"
"array set ::dialog_knob::var_jump {} ;\n"
"\n"
"array set ::dialog_knob::var_snd {} ;\n"
"array set ::dialog_knob::var_prm {} ;\n"
"array set ::dialog_knob::var_var {} ;\n"
"array set ::dialog_knob::var_rcv {} ;\n"
"\n"
"array set ::dialog_knob::var_color_background {} ;\n"
"array set ::dialog_knob::var_color_foreground {} ;\n"
"array set ::dialog_knob::var_color_arc {} ;\n"
"array set ::dialog_knob::var_colortype {} ;\n"
"array set ::dialog_knob::var_arcstart {} ;\n"
"\n"
        
// When we click one of the preset colorsc
"proc ::dialog_knob::preset_col {mytoplevel presetcol} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
"    switch -- $::dialog_knob::var_colortype($vid) {\n"
"        0 { set ::dialog_knob::var_color_background($vid) $presetcol }\n"
"        1 { set ::dialog_knob::var_color_arc($vid) $presetcol }\n"
"        2 { set ::dialog_knob::var_color_foreground($vid) $presetcol }\n"
"    }\n"
"    if {$::windowingsystem eq \"aqua\"} {\n"
"    ::dialog_knob::apply_and_rebind_return $mytoplevel \n"
"    }\n"
"}\n"
"\n"
// When we click compose color:
"proc ::dialog_knob::compose_color {mytoplevel} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
// Check which color field is currently active
"    switch -- $::dialog_knob::var_colortype($vid) {\n"
"        0 {\n"
"            set title [_ \"Background color\" ]\n"
"            set color $::dialog_knob::var_color_background($vid)\n"
"        }\n"
"        1 {\n"
"            set title [_ \"Foreground color\" ]\n"
"            set color $::dialog_knob::var_color_foreground($vid)\n"
"        }\n"
"        2 {\n"
"            set title [_ \"Arc color\" ]\n"
"            set color $::dialog_knob::var_color_arc($vid)\n"
"        }\n"
"    }\n"
"    set color [tk_chooseColor -title $title -initialcolor $color]\n"
"\n"
"    if { $color ne \"\" } {\n"
"        ::dialog_knob::preset_col $mytoplevel $color\n"
"    }\n"
"}\n"
"\n"
"proc ::dialog_knob::clip {val min {max {}}} {\n"
"    if {$min ne {} && $val < $min} {return $min}\n"
"    if {$max ne {} && $val > $max} {return $max}\n"
"    return $val\n"
"}\n"
"\n"
        
// Send current values to Pd when "apply"
"proc ::dialog_knob::apply {mytoplevel} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
"    set sendname empty\n"
"    set paramname empty\n"
"    set varname empty\n"
"    set receivename empty\n"
"\n"
//  Set send, param, var and receive if not empty
"    if {$::dialog_knob::var_snd($vid) ne \"\"} {set sendname $::dialog_knob::var_snd($vid)}\n"
"    if {$::dialog_knob::var_prm($vid) ne \"\"} {set paramname $::dialog_knob::var_prm($vid)}\n"
"    if {$::dialog_knob::var_var($vid) ne \"\"} {set varname $::dialog_knob::var_var($vid)}\n"
"    if {$::dialog_knob::var_rcv($vid) ne \"\"} {set receivename $::dialog_knob::var_rcv($vid)}\n"
"\n"
//  Clip number if steps
"    set ::dialog_knob::var_steps($vid) [::dialog_knob::clip $::dialog_knob::var_steps($vid) 0 360]\n"
"\n"
//  Send to the object
"    pdsend [concat $mytoplevel dialog \\\n"
"                $::dialog_knob::var_size($vid) \\\n"
"                $::dialog_knob::var_range_min($vid) \\\n"
"                $::dialog_knob::var_range_max($vid) \\\n"
"                $::dialog_knob::var_initial($vid) \\\n"
"                [string map {\"$\" {\\$}} [unspace_text $sendname]] \\\n"
"                [string map {\"$\" {\\$}} [unspace_text $receivename]] \\\n"
"                $::dialog_knob::var_outline_shown($vid) \\\n"
"                $::dialog_knob::var_exp($vid) \\\n"
"                $::dialog_knob::var_expmode($vid) \\\n"
"                $::dialog_knob::var_jump($vid) \\\n"
"                [string tolower $::dialog_knob::var_color_background($vid)] \\\n"
"                [string tolower $::dialog_knob::var_color_arc($vid)] \\\n"
"                [string tolower $::dialog_knob::var_color_foreground($vid)] \\\n"
"                $::dialog_knob::var_circular($vid) \\\n"
"                $::dialog_knob::var_steps($vid) \\\n"
"                $::dialog_knob::var_discrete($vid) \\\n"
"                $::dialog_knob::var_arc_shown($vid) \\\n"
"                $::dialog_knob::var_angle_width($vid) \\\n"
"                $::dialog_knob::var_angle_offset($vid) \\\n"
"                $::dialog_knob::var_arcstart($vid) \\\n"
"                [string map {\"$\" {\\$}} [unspace_text $paramname]] \\\n" // clean
"                [string map {\"$\" {\\$}} [unspace_text $varname]] \\\n" // clean
"                $::dialog_knob::var_savestate($vid) \\\n"
"                $::dialog_knob::var_loadbang($vid) \\\n"
"                $::dialog_knob::var_showticks($vid) \\\n"
"            ]\n"
"}\n"
// On cancel clicked
"proc ::dialog_knob::cancel {mytoplevel} {\n"
"    pdsend \"$mytoplevel cancel\"\n"
"}\n"
"\n"
// On okay clicked
"proc ::dialog_knob::ok {mytoplevel} {\n"
"    ::dialog_knob::apply $mytoplevel\n"
"    ::dialog_knob::cancel $mytoplevel\n"
"}\n"

// tcl/tk entry function called from Pd when asking for properties!
"proc knob_dialog {mytoplevel \\\n"
"         wdt \\\n"
"         min_rng max_rng \\\n"
"         initial circular \\\n"
"         snd rcv \\\n"
"         expmode exp jump \\\n"
"         bcol fcol acol \\\n"
"         discrete steps \\\n"
"         arc_width \\\n"
"         angle_range angle_offset \\\n"
"         outline arcstart prm var \\\n"
"         savestate loadbang showticks} {\n"
// The vid indicates the instance ID of this dialog
"    set vid [string trimleft $mytoplevel .]\n"
"    set snd [::pdtk_text::unescape $snd]\n"
"    set prm [::pdtk_text::unescape $prm]\n"
"    set var [::pdtk_text::unescape $var]\n"
"    set rcv [::pdtk_text::unescape $rcv]\n"
// initialize the array with received values for this dialog instance
"    set ::dialog_knob::var_size($vid) $wdt\n"
"\n"
"    if {$rcv==\"empty\"} {\n"
"       set rcv \"\"\n"
"    }\n"
"    if {$snd==\"empty\"} {\n"
"       set snd \"\"\n"
"    }\n"
"    if {$prm==\"empty\"} {\n"
"       set prm \"\"\n"
"    }\n"
"    if {$var==\"empty\"} {\n"
"       set var \"\"\n"
"    }\n"
"    set ::dialog_knob::var_range_max($vid) $max_rng\n"
"    set ::dialog_knob::var_range_min($vid) $min_rng\n"
"\n"
"    set ::dialog_knob::var_initial($vid) $initial\n"
"    set ::dialog_knob::var_circular($vid) $circular\n"
"    set ::dialog_knob::var_expmode($vid) $expmode\n"
"    set ::dialog_knob::var_exp($vid) $exp\n"
"    set ::dialog_knob::var_jump($vid) $jump\n"
"    set ::dialog_knob::var_outline_shown($vid) $outline\n"
"    set ::dialog_knob::var_savestate($vid) $savestate\n"
"    set ::dialog_knob::var_loadbang($vid) $loadbang\n"
"    set ::dialog_knob::var_showticks($vid) $showticks\n"
"\n"
"    set ::dialog_knob::var_snd($vid) [string map {{\\ } \" \"} $snd]\n"
"    set ::dialog_knob::var_prm($vid) [string map {{\\ } \" \"} $prm]\n"
"    set ::dialog_knob::var_var($vid) [string map {{\\ } \" \"} $var]\n"
"    set ::dialog_knob::var_rcv($vid) [string map {{\\ } \" \"} $rcv]\n"
"\n"
"    set ::dialog_knob::var_color_background($vid) $bcol\n"
"    set ::dialog_knob::var_color_foreground($vid) $fcol\n"
"    set ::dialog_knob::var_color_arc($vid) $acol\n"
"    set ::dialog_knob::var_colortype($vid) 0\n"
"\n"
"    set ::dialog_knob::var_discrete($vid) $discrete\n"
"    set ::dialog_knob::var_steps($vid) $steps\n"
"    set ::dialog_knob::var_arc_shown($vid) $arc_width\n"
"    set ::dialog_knob::var_angle_width($vid) $angle_range\n"
"    set ::dialog_knob::var_angle_offset($vid) $angle_offset\n"
"    set ::dialog_knob::var_arcstart($vid) $arcstart\n"
"\n"
        
// Initialize creation/drawing of properties window
"    toplevel $mytoplevel -class DialogWindow\n"
"    wm title $mytoplevel \"knob properties\"\n"
"    wm group $mytoplevel .\n"
"    wm resizable $mytoplevel 0 0\n"
"    wm transient $mytoplevel $::focused_window\n"
"    $mytoplevel configure -menu $::dialog_menubar\n"
"    $mytoplevel configure -padx 0 -pady 0\n"
"    ::pd_bindings::dialog_bindings $mytoplevel \"iemgui\"\n"
"\n"
// Create frame for parameters
"    frame $mytoplevel.para -padx 5 -pady 5 \n"
"    pack $mytoplevel.para -side top -fill x -pady 5\n"
"\n"
"    set applycmd \"\"\n"
"    if {$::windowingsystem eq \"aqua\"} {\n"
"        set applycmd \"::dialog_knob::apply $mytoplevel\"\n"
"    }\n"
"\n"
        
// knobstyle 1st top entries
"    frame $mytoplevel.para.knobstyle -padx 20 -pady 1\n"
"\n"
// Entry for size
"    frame $mytoplevel.para.knobstyle.dim \n"
"    label $mytoplevel.para.knobstyle.dim.w_lab -text \"Size:\"\n"
"    entry $mytoplevel.para.knobstyle.dim.w_ent -textvariable ::dialog_knob::var_size($vid) -width 4\n"
"    label $mytoplevel.para.knobstyle.dim.dummy1 -text \"\" -width 1\n"
"    pack $mytoplevel.para.knobstyle.dim.w_lab $mytoplevel.para.knobstyle.dim.w_ent -side left\n"
// Entry for initial value
"    frame $mytoplevel.para.knobstyle.initial \n"
"    label $mytoplevel.para.knobstyle.initial.lab -text [_ \"Load Value\"]\n"
"    entry $mytoplevel.para.knobstyle.initial.ent -textvariable ::dialog_knob::var_initial($vid) -width 4\n"
"    pack $mytoplevel.para.knobstyle.initial.lab -side left -expand 0 -ipadx 4\n"
"    pack $mytoplevel.para.knobstyle.initial.ent -side left -expand 0 -ipadx 10\n"
// Entry for arc start
"    frame $mytoplevel.para.knobstyle.arcstart \n"
"    label $mytoplevel.para.knobstyle.arcstart.lab -text [_ \"Arc Start Value\"]\n"
"    entry $mytoplevel.para.knobstyle.arcstart.ent -textvariable ::dialog_knob::var_arcstart($vid) -width 4\n"
"    pack $mytoplevel.para.knobstyle.arcstart.lab -side left -expand 0 -ipadx 4\n"
"    pack $mytoplevel.para.knobstyle.arcstart.ent -side left -expand 0 -ipadx 10\n"
// Entry for Arc (Checkbox)
"    frame $mytoplevel.para.knobstyle.arc\n"
"    label $mytoplevel.para.knobstyle.arc.lab -text [_ \"Show Arc: \"]\n"
"    checkbutton $mytoplevel.para.knobstyle.arc.ent -variable ::dialog_knob::var_arc_shown($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.arc.ent $mytoplevel.para.knobstyle.arc.lab -side right -anchor e\n"
// Entry for Circular Drag (Checkbox)
"    frame $mytoplevel.para.knobstyle.move \n"
"    label $mytoplevel.para.knobstyle.move.lab -text [_ \"Circular Drag:\"]\n"
"    checkbutton $mytoplevel.para.knobstyle.move.mode -variable ::dialog_knob::var_circular($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.move.mode $mytoplevel.para.knobstyle.move.lab -side right -anchor e\n"
// Entry for Jump on Click(Checkbox)
"    frame $mytoplevel.para.knobstyle.jump\n"
"    label $mytoplevel.para.knobstyle.jump.lab -text [_ \"Jump on Click: \"]\n"
"    checkbutton $mytoplevel.para.knobstyle.jump.ent -variable ::dialog_knob::var_jump($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.jump.ent $mytoplevel.para.knobstyle.jump.lab -side right -anchor e\n"
// Entry for Outline (Checkbox)
"    frame $mytoplevel.para.knobstyle.outline\n"
"    label $mytoplevel.para.knobstyle.outline.lab -text [_ \"Show Outline: \"]\n"
"    checkbutton $mytoplevel.para.knobstyle.outline.ent -variable ::dialog_knob::var_outline_shown($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.outline.ent $mytoplevel.para.knobstyle.outline.lab -side right -anchor e\n"
// Entry for Savestate (Checkbox)
"    frame $mytoplevel.para.knobstyle.savestate\n"
"    label $mytoplevel.para.knobstyle.savestate.lab -text [_ \"Savestate: \"]\n"
"    checkbutton $mytoplevel.para.knobstyle.savestate.ent -variable ::dialog_knob::var_savestate($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.savestate.ent $mytoplevel.para.knobstyle.savestate.lab -side right -anchor e\n"
// Entry for Loadbang (Checkbox)
"    frame $mytoplevel.para.knobstyle.loadbang\n"
"    label $mytoplevel.para.knobstyle.loadbang.lab -text [_ \"Loadbang: \"]\n"
"    checkbutton $mytoplevel.para.knobstyle.loadbang.ent -variable ::dialog_knob::var_loadbang($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.loadbang.ent $mytoplevel.para.knobstyle.loadbang.lab -side right -anchor e\n"
// Align items to grid
"    pack $mytoplevel.para.knobstyle -side top -fill x\n"
// column 0
"    grid $mytoplevel.para.knobstyle.dim -row 0 -column 0 -sticky e -padx {5 0}\n"
"    grid $mytoplevel.para.knobstyle.arcstart -row 1 -column 0 -sticky e -padx {5 0}\n"
"    grid $mytoplevel.para.knobstyle.initial -row 2 -column 0 -sticky e -padx {5 0}\n"
"    grid $mytoplevel.para.knobstyle.savestate -row 3 -column 0 -sticky e -padx {5 0}\n"
"    grid $mytoplevel.para.knobstyle.loadbang -row 4 -column 0 -sticky e -padx {5 0}\n"
// column 1
"    grid $mytoplevel.para.knobstyle.outline -row 0 -column 1 -sticky e -padx {5 0}\n"
"    grid $mytoplevel.para.knobstyle.arc -row 1 -column 1 -sticky e -padx {5 0}\n"
"    grid $mytoplevel.para.knobstyle.move -row 2 -column 1 -sticky e -padx {5 0} \n"
"    grid $mytoplevel.para.knobstyle.jump -row 3 -column 1 -sticky e -padx {5 0}\n"
        
// Frame for discrete section
"    labelframe $mytoplevel.discrete\n"
"    pack $mytoplevel.discrete -side top -fill x\n"
"    $mytoplevel.discrete config -borderwidth 1 -pady 4 -text \"Discrete Mode / Show Ticks:\"\n"
// Checkbox for discrete mode
"    frame $mytoplevel.discrete.mode\n"
"    label $mytoplevel.discrete.mode.lab -text [_ \"Discrete mode: \"]\n"
"    checkbutton $mytoplevel.discrete.mode.ent -variable ::dialog_knob::var_discrete($vid) -width 5\n"
"    pack $mytoplevel.discrete.mode.ent $mytoplevel.discrete.mode.lab -side right -anchor e\n"
// Checkbox for show ticks
"    frame $mytoplevel.discrete.ticks\n"
"    label $mytoplevel.discrete.ticks.lab -text [_ \"Show ticks: \"]\n"
"    checkbutton $mytoplevel.discrete.ticks.ent -variable ::dialog_knob::var_showticks($vid) -width 5\n"
"    pack $mytoplevel.discrete.ticks.ent $mytoplevel.discrete.ticks.lab -side right -anchor e\n"
// Entry for number of steps
"    frame $mytoplevel.discrete.steps\n"
"    label $mytoplevel.discrete.steps.lab -text [_ \"Steps: \"]\n"
"    entry $mytoplevel.discrete.steps.ent -textvariable ::dialog_knob::var_steps($vid) -width 5\n"
"    pack $mytoplevel.discrete.steps.ent $mytoplevel.discrete.steps.lab -side right -anchor e\n"
// Position of items
"    pack $mytoplevel.discrete.mode $mytoplevel.discrete.ticks -side left\n"
"    pack $mytoplevel.discrete.steps -side right\n"
        
// Frame for range section
"    labelframe $mytoplevel.rng\n"
"    pack $mytoplevel.rng -side top -fill x\n"
"    $mytoplevel.rng config -borderwidth 1 -pady 4 -text \"Range:\"\n"
// Range minimum entry
"    frame $mytoplevel.rng.range \n"
"    frame $mytoplevel.rng.range.min\n"
"    label $mytoplevel.rng.range.min.lab -text \"Lower:\"\n"
"    entry $mytoplevel.rng.range.min.ent -textvariable ::dialog_knob::var_range_min($vid) -width 7\n"
"    label $mytoplevel.rng.range.dummy1 -text \"\" -width 1\n"
// Range maximum entry
"    label $mytoplevel.rng.range.max_lab -text \"Upper:\"\n"
"    entry $mytoplevel.rng.range.max_ent -textvariable ::dialog_knob::var_range_max($vid) -width 7\n"
"    pack $mytoplevel.rng.range.min\n"
"    pack $mytoplevel.rng.range.min.lab $mytoplevel.rng.range.min.ent -side left \n"
"    $mytoplevel.rng config -padx 26\n"
"    pack configure $mytoplevel.rng.range.min -side left\n"
"    pack $mytoplevel.rng.range.dummy1 $mytoplevel.rng.range.max_lab $mytoplevel.rng.range.max_ent -side left\n"
// Logmode radiobuttons
"    frame $mytoplevel.rng.logmode\n"
"    radiobutton $mytoplevel.rng.logmode.radio1 -value 0 \\\n"
"        -text [_ \"linear\" ] \\\n"
"        -variable ::dialog_knob::var_expmode($vid) \\\n"
"        -command \"$mytoplevel.rng.logmode.expmode_entry configure -state disabled\"\n"
"    radiobutton $mytoplevel.rng.logmode.radio2 -value 1 \\\n"
"        -text [_ \"log\" ] \\\n"
"        -variable ::dialog_knob::var_expmode($vid) \\\n"
"        -command \"$mytoplevel.rng.logmode.expmode_entry configure -state disabled\"\n"
"    radiobutton $mytoplevel.rng.logmode.radio3 -value 2 \\\n"
"        -text [_ \"exp:\" ] \\\n"
"        -variable ::dialog_knob::var_expmode($vid) \\\n"
"        -command \"$mytoplevel.rng.logmode.expmode_entry configure -state normal\"\n"
"    entry $mytoplevel.rng.logmode.expmode_entry -width 3 -textvariable ::dialog_knob::var_exp($vid) \n"
// When exp is selected, enable text box
"    if { $::dialog_knob::var_expmode($vid) != 2 } {\n"
"       $mytoplevel.rng.logmode.expmode_entry configure -state disabled\n"
"    }\n"
"    pack $mytoplevel.rng.logmode.expmode_entry $mytoplevel.rng.logmode.radio3 $mytoplevel.rng.logmode.radio2 $mytoplevel.rng.logmode.radio1 -side right \n"
"    pack $mytoplevel.rng.range $mytoplevel.rng.logmode -side top\n"

// Frame for Angle entry
"    labelframe $mytoplevel.angle\n"
"    pack $mytoplevel.angle -side top -fill x\n"
"    $mytoplevel.angle config -borderwidth 1 -pady 4 -text \"Angle:\"\n"
// Range entry
"    frame $mytoplevel.angle.range\n"
"    label $mytoplevel.angle.range.lab -text [_ \"Range: \"]\n"
"    entry $mytoplevel.angle.range.ent -textvariable ::dialog_knob::var_angle_width($vid) -width 5\n"
"    pack $mytoplevel.angle.range.ent $mytoplevel.angle.range.lab -side right -anchor e\n"
// Offset entry
"    frame $mytoplevel.angle.offset\n"
"    label $mytoplevel.angle.offset.lab -text [_ \"Offset: \"]\n"
"    entry $mytoplevel.angle.offset.ent -textvariable ::dialog_knob::var_angle_offset($vid) -width 5\n"
"    pack $mytoplevel.angle.offset.ent $mytoplevel.angle.offset.lab -side right -anchor w\n"
//
"    pack $mytoplevel.angle.range $mytoplevel.angle.offset -side left -anchor center\n"
"    $mytoplevel.angle config -padx 60\n"
        
// Send/param/var/receive entry
"    labelframe $mytoplevel.s_r -borderwidth 1 -padx 5 -pady 5 -text [_ \"Receive/Send/Param/Variable\"]\n"
"    pack $mytoplevel.s_r -side top -fill x\n"
    // receive
"    frame $mytoplevel.s_r.receive\n"
"    pack $mytoplevel.s_r.receive -side top -anchor e -padx 5\n"
"    label $mytoplevel.s_r.receive.lab -text [_ \"Receive symbol:\"]\n"
"    entry $mytoplevel.s_r.receive.ent -textvariable ::dialog_knob::var_rcv($vid) -width 21\n"
"    if { $rcv ne \"norcvno\" } {\n"
"        pack $mytoplevel.s_r.receive.lab $mytoplevel.s_r.receive.ent -side left \\\n"
"            -fill x -expand 1\n"
"    }\n"
    // send
"    frame $mytoplevel.s_r.send\n"
"    pack $mytoplevel.s_r.send -side top -anchor e -padx 5\n"
"    label $mytoplevel.s_r.send.lab -text [_ \"Send symbol:\"]\n"
"    entry $mytoplevel.s_r.send.ent -textvariable ::dialog_knob::var_snd($vid) -width 21\n"
"    if { $snd ne \"nosndno\" } {\n"
"        pack $mytoplevel.s_r.send.lab $mytoplevel.s_r.send.ent -side left \\\n"
"            -fill x -expand 1\n"
"    }\n"
    // param
"    frame $mytoplevel.s_r.param\n"
"    pack $mytoplevel.s_r.param -side top -anchor e -padx 5\n"
"    label $mytoplevel.s_r.param.lab -text [_ \"Param symbol:\"]\n"
"    entry $mytoplevel.s_r.param.ent -textvariable ::dialog_knob::var_prm($vid) -width 21\n"
"    if { $prm ne \"noprmno\" } {\n"
"        pack $mytoplevel.s_r.param.lab $mytoplevel.s_r.param.ent -side left \\\n"
"            -fill x -expand 1\n"
"    }\n"
    // var
"    frame $mytoplevel.s_r.var\n"
"    pack $mytoplevel.s_r.var -side top -anchor e -padx 5\n"
"    label $mytoplevel.s_r.var.lab -text [_ \"Variable symbol:\"]\n"
"    entry $mytoplevel.s_r.var.ent -textvariable ::dialog_knob::var_var($vid) -width 21\n"
"    if { $var ne \"novarno\" } {\n"
"        pack $mytoplevel.s_r.var.lab $mytoplevel.s_r.var.ent -side left \\\n"
"            -fill x -expand 1\n"
"    }\n"

// Frame for colors section
"    labelframe $mytoplevel.colors -borderwidth 1 -text [_ \"Colors\"] -padx 5 -pady 5\n"
"    pack $mytoplevel.colors -fill x\n"
// Radiobuttons for foreground or background color
"    frame $mytoplevel.colors.select\n"
"    pack $mytoplevel.colors.select -side top\n"
"    radiobutton $mytoplevel.colors.select.radio0 \\\n"
"        -value 0 -variable ::dialog_knob::var_colortype($vid) \\\n"
"        -text [_ \"Background\"] -justify left\n"
"    radiobutton $mytoplevel.colors.select.radio1 \\\n"
"        -value 1 -variable ::dialog_knob::var_colortype($vid) \\\n"
"        -text [_ \"Arc Background\"] -justify left\n"
"    radiobutton $mytoplevel.colors.select.radio2 \\\n"
"        -value 2 -variable ::dialog_knob::var_colortype($vid) \\\n"
"        -text [_ \"Front\"] -justify left\n"
"    pack $mytoplevel.colors.select.radio0 $mytoplevel.colors.select.radio1 $mytoplevel.colors.select.radio2 -side left\n"
"    frame $mytoplevel.colors.sections\n"
"    pack $mytoplevel.colors.sections -side top\n"
"    button $mytoplevel.colors.sections.but -text [_ \"Compose color\"] \\\n"
"        -command \"::dialog_knob::compose_color $mytoplevel\"\n"
"    pack $mytoplevel.colors.sections.but -side left -anchor w -pady 5 \\\n"
"        -expand yes -fill x\n"
"    frame $mytoplevel.colors.sections.exp\n"
// Preset colors, color scheme by Mary Ann Benedetto http://piR2.org
"    foreach r {r1 r2 r3} hexcols {\n"
"       { \"#FFFFFF\" \"#DFDFDF\" \"#BBBBBB\" \"#FFC7C6\" \"#FFE3C6\" \"#FEFFC6\" \"#C6FFC7\" \"#C6FEFF\" \"#C7C6FF\" \"#E3C6FF\" }\n"
"       { \"#9F9F9F\" \"#7C7C7C\" \"#606060\" \"#FF0400\" \"#FF8300\" \"#FAFF00\" \"#00FF04\" \"#00FAFF\" \"#0400FF\" \"#9C00FF\" }\n"
"       { \"#404040\" \"#202020\" \"#000000\" \"#551312\" \"#553512\" \"#535512\" \"#0F4710\" \"#0E4345\" \"#131255\" \"#2F004D\" } } \\\n"
"    {\n"
"       frame $mytoplevel.colors.$r\n"
"       pack $mytoplevel.colors.$r -side top\n"
"       foreach i { 0 1 2 3 4 5 6 7 8 9} hexcol $hexcols \\\n"
"           {\n"
"               label $mytoplevel.colors.$r.c$i -background $hexcol -activebackground $hexcol -relief ridge -padx 7 -pady 0 -width 1\n"
"               bind $mytoplevel.colors.$r.c$i <Button> \"::dialog_knob::preset_col $mytoplevel $hexcol\"\n"
"           }\n"
"       pack $mytoplevel.colors.$r.c0 $mytoplevel.colors.$r.c1 $mytoplevel.colors.$r.c2 $mytoplevel.colors.$r.c3 \\\n"
"           $mytoplevel.colors.$r.c4 $mytoplevel.colors.$r.c5 $mytoplevel.colors.$r.c6 $mytoplevel.colors.$r.c7 \\\n"
"           $mytoplevel.colors.$r.c8 $mytoplevel.colors.$r.c9 -side left\n"
"    }\n"
// Cancel and OK buttons
"    frame $mytoplevel.cao -pady 10\n"
"    pack $mytoplevel.cao -side top\n"
"    button $mytoplevel.cao.cancel -text [_ \"Cancel\"] \\\n"
"        -command \"::dialog_knob::cancel $mytoplevel\"\n"
"    pack $mytoplevel.cao.cancel -side left -expand 1 -fill x -padx 15 -ipadx 10\n"
"    if {$::windowingsystem ne \"aqua\"} {\n"
"        button $mytoplevel.cao.apply -text [_ \"Apply\"] \\\n"
"            -command \"::dialog_knob::apply $mytoplevel\"\n"
"        pack $mytoplevel.cao.apply -side left -expand 1 -fill x -padx 15 -ipadx 10\n"
"    }\n"
"    button $mytoplevel.cao.ok -text [_ \"OK\"] \\\n"
"        -command \"::dialog_knob::ok $mytoplevel\" -default active\n"
"    pack $mytoplevel.cao.ok -side left -expand 1 -fill x -padx 15 -ipadx 10\n"
        
// live widget updates on OSX in lieu of Apply button
"    if {$::windowingsystem eq \"aqua\"} {\n"
// call apply on Return in entry boxes that are in focus & rebind Return to ok button
"        bind $mytoplevel.discrete.steps.ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.discrete.steps.ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.angle.range.ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.angle.offset.ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
// unbind Return from ok button when an entry takes focus
"        $mytoplevel.discrete.steps.ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"        $mytoplevel.angle.range.ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"        $mytoplevel.angle.offset.ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"    }\n"
"    set applycmd \"\"\n"
"    if {$::windowingsystem eq \"aqua\"} {\n"
"        set applycmd \"::dialog_knob::apply $mytoplevel\"\n"
"    }\n"
        
// live widget updates on OSX in lieu of Apply button
"    if {$::windowingsystem eq \"aqua\"} {\n"
// call apply on Return in entry boxes that are in focus & rebind Return to ok button
"        bind $mytoplevel.para.knobstyle.dim.w_ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.rng.logmode.expmode_entry <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.rng.range.min.ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.rng.range.max_ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.s_r.send.ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.s_r.param.ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.s_r.var.ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.s_r.receive.ent <KeyPress-Return> \"::dialog_knob::apply_and_rebind_return $mytoplevel\"\n"
// unbind Return from ok button when an entry takes focus
"        $mytoplevel.para.knobstyle.dim.w_ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"        $mytoplevel.rng.logmode.expmode_entry config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"        $mytoplevel.rng.range.min.ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"        $mytoplevel.rng.range.max_ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"        $mytoplevel.s_r.send.ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"        $mytoplevel.s_r.param.ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"        $mytoplevel.s_r.var.ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
"        $mytoplevel.s_r.receive.ent config -validate focusin -vcmd \"::dialog_knob::unbind_return $mytoplevel\"\n"
// remove cancel button from focus list since it's not activated on Return
"        $mytoplevel.cao.cancel config -takefocus 0\n"
// show active focus on the ok button as it *is* activated on Return
"        $mytoplevel.cao.ok config -default normal\n"
"        bind $mytoplevel.cao.ok <FocusIn> \"$mytoplevel.cao.ok config -default active\"\n"
"        bind $mytoplevel.cao.ok <FocusOut> \"$mytoplevel.cao.ok config -default normal\"\n"
// since we show the active focus, disable the highlight outline\n"
"        $mytoplevel.cao.ok config -highlightthickness 0\n"
"        $mytoplevel.cao.cancel config -highlightthickness 0\n"
"    }\n"
"    position_over_window $mytoplevel $::focused_window\n"
"}\n"
// for live widget updates on OSX
"proc ::dialog_knob::apply_and_rebind_return {mytoplevel} {\n"
"    ::dialog_knob::apply $mytoplevel\n"
"    bind $mytoplevel <KeyPress-Return> \"::dialog_knob::ok $mytoplevel\"\n"
"    focus $mytoplevel.cao.ok\n"
"    return 0\n"
"}\n"
// for live widget updates on OSX
"proc ::dialog_knob::unbind_return {mytoplevel} {\n"
"    bind $mytoplevel <KeyPress-Return> break\n"
"    return 1\n"
"}\n"
);
